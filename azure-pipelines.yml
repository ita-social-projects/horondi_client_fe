trigger:
  - development
  - master

pr: none

resources:
  - repo: self

variables:
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Main
    displayName: Main
    jobs:
      - job: Build
        displayName: BuildandDeploy
        condition: in(variables['Build.Reason'], 'IndividualCI', 'Manual')
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: DownloadSecureFile@1
            name: envprod
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              secureFile: 'env-front'
          - task: Bash@3
            name: prodfile
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              targetType: 'inline'
              script: 'mv $(envprod.secureFilePath) .env'
          - task: DownloadSecureFile@1
            name: envdev
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
            inputs:
              secureFile: 'env-front-staging'
          - task: Bash@3
            name: devfile
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
            inputs:
              targetType: 'inline'
              script: 'mv $(envdev.secureFilePath) .env'
          - task: Docker@0
            name: stagingBuild
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryConnection: 'Horondi-Staging-Registry'
              action: 'Build an image'
              dockerFile: '**/Dockerfile'
              buildArguments: 'password=$(pass)'
              imageName: '$(Build.Repository.Name):$(Build.BuildId)'
          - task: Docker@0
            name: deployedStaging
            displayName: 'Push an image'
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryConnection: 'Horondi-Staging-Registry'
              action: 'Push an image'
              imageName: '$(Build.Repository.Name):$(Build.BuildId)'
          - task: Docker@0
            name: productionBuild
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryConnection: 'Horondi-Registry'
              action: 'Build an image'
              dockerFile: '**/Dockerfile'
              imageName: '$(Build.Repository.Name):$(Build.BuildId)'
          - task: Docker@0
            name: deployedProduction
            displayName: 'Push an image'
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryConnection: 'Horondi-Registry'
              action: 'Push an image'
              imageName: '$(Build.Repository.Name):$(Build.BuildId)'
          - task: AzureWebAppContainer@1
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              azureSubscription: 'Horondi-Admin-Service'
              appName: 'horondi-front'
              containers: 'horondi.azurecr.io/ita-social-projects/horondi_client_fe:$(Build.BuildId)'
          - task: AzureWebAppContainer@1
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
            inputs:
              azureSubscription: 'Horondi-Admin-Service'
              appName: 'horondi-front-staging'
              containers: 'horondistaging.azurecr.io/ita-social-projects/horondi_client_fe:$(Build.BuildId)'
